// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

#define PIN_OFFS_DCLK 8
#define PIN_OFFS_HREF 9

// ----------- //
// camera_read //
// ----------- //

#define camera_read_wrap_target 0
#define camera_read_wrap 3

static const uint16_t camera_read_program_instructions[] = {
            //     .wrap_target
    0x20a9, //  0: wait   1 pin, 9                   
    0x20a8, //  1: wait   1 pin, 8                   
    0x4008, //  2: in     pins, 8                    
    0x2028, //  3: wait   0 pin, 8                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program camera_read_program = {
    .instructions = camera_read_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config camera_read_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + camera_read_wrap_target, offset + camera_read_wrap);
    return c;
}

static void camera_read_init(PIO pio, uint sm, uint offset, uint base_pin)
{
    pio_sm_set_consecutive_pindirs(pio, sm, base_pin, 10, false);
    pio_sm_config c = camera_read_program_get_default_config(offset);
    sm_config_set_in_pins(&c, base_pin);
    sm_config_set_in_shift(&c, false, true, 8);
    // sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
    pio_sm_clear_fifos(pio, sm);
}

#endif

